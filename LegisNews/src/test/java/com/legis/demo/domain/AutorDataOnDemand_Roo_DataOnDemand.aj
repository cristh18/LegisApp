// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.legis.demo.domain;

import com.legis.demo.dao.AutorDAO;
import com.legis.demo.domain.Autor;
import com.legis.demo.domain.AutorDataOnDemand;
import com.legis.demo.domain.PublicationDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AutorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AutorDataOnDemand: @Component;
    
    private Random AutorDataOnDemand.rnd = new SecureRandom();
    
    private List<Autor> AutorDataOnDemand.data;
    
    @Autowired
    PublicationDataOnDemand AutorDataOnDemand.publicationDataOnDemand;
    
    @Autowired
    AutorDAO AutorDataOnDemand.autorDAO;
    
    public Autor AutorDataOnDemand.getNewTransientAutor(int index) {
        Autor obj = new Autor();
        setAutorLastName(obj, index);
        setAutorName(obj, index);
        setId(obj, index);
        setNationality(obj, index);
        return obj;
    }
    
    public void AutorDataOnDemand.setAutorLastName(Autor obj, int index) {
        String autorLastName = "autorLastName_" + index;
        if (autorLastName.length() > 20) {
            autorLastName = autorLastName.substring(0, 20);
        }
        obj.setAutorLastName(autorLastName);
    }
    
    public void AutorDataOnDemand.setAutorName(Autor obj, int index) {
        String autorName = "autorName_" + index;
        if (autorName.length() > 20) {
            autorName = autorName.substring(0, 20);
        }
        obj.setAutorName(autorName);
    }
    
    public void AutorDataOnDemand.setId(Autor obj, int index) {
        Long id = new Integer(index).longValue();
        obj.setId(id);
    }
    
    public void AutorDataOnDemand.setNationality(Autor obj, int index) {
        String nationality = "nationality_" + index;
        if (nationality.length() > 20) {
            nationality = nationality.substring(0, 20);
        }
        obj.setNationality(nationality);
    }
    
    public Autor AutorDataOnDemand.getSpecificAutor(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Autor obj = data.get(index);
        Long id = obj.getId_();
        return autorDAO.findOne(id);
    }
    
    public Autor AutorDataOnDemand.getRandomAutor() {
        init();
        Autor obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId_();
        return autorDAO.findOne(id);
    }
    
    public boolean AutorDataOnDemand.modifyAutor(Autor obj) {
        return false;
    }
    
    public void AutorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = autorDAO.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Autor' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Autor>();
        for (int i = 0; i < 10; i++) {
            Autor obj = getNewTransientAutor(i);
            try {
                autorDAO.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            autorDAO.flush();
            data.add(obj);
        }
    }
    
}
