// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.legis.demo.domain;

import com.legis.demo.dao.PublicationDAO;
import com.legis.demo.domain.CategoryDataOnDemand;
import com.legis.demo.domain.Publication;
import com.legis.demo.domain.PublicationDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PublicationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PublicationDataOnDemand: @Component;
    
    private Random PublicationDataOnDemand.rnd = new SecureRandom();
    
    private List<Publication> PublicationDataOnDemand.data;
    
    @Autowired
    CategoryDataOnDemand PublicationDataOnDemand.categoryDataOnDemand;
    
    @Autowired
    PublicationDAO PublicationDataOnDemand.publicationDAO;
    
    public Publication PublicationDataOnDemand.getNewTransientPublication(int index) {
        Publication obj = new Publication();
        setId(obj, index);
        setPublicationName(obj, index);
        setPublicationNumber(obj, index);
        return obj;
    }
    
    public void PublicationDataOnDemand.setId(Publication obj, int index) {
        Long id = new Integer(index).longValue();
        obj.setId(id);
    }
    
    public void PublicationDataOnDemand.setPublicationName(Publication obj, int index) {
        String publicationName = "publicationName_" + index;
        if (publicationName.length() > 20) {
            publicationName = publicationName.substring(0, 20);
        }
        obj.setPublicationName(publicationName);
    }
    
    public void PublicationDataOnDemand.setPublicationNumber(Publication obj, int index) {
        Long publicationNumber = new Integer(index).longValue();
        obj.setPublicationNumber(publicationNumber);
    }
    
    public Publication PublicationDataOnDemand.getSpecificPublication(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Publication obj = data.get(index);
        Long id = obj.getId_();
        return publicationDAO.findOne(id);
    }
    
    public Publication PublicationDataOnDemand.getRandomPublication() {
        init();
        Publication obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId_();
        return publicationDAO.findOne(id);
    }
    
    public boolean PublicationDataOnDemand.modifyPublication(Publication obj) {
        return false;
    }
    
    public void PublicationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = publicationDAO.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Publication' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Publication>();
        for (int i = 0; i < 10; i++) {
            Publication obj = getNewTransientPublication(i);
            try {
                publicationDAO.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            publicationDAO.flush();
            data.add(obj);
        }
    }
    
}
